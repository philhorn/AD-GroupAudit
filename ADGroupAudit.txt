Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# === Load Config ===
$ConfigPath = "$PSScriptRoot\config.json"
if (Test-Path $ConfigPath) {
    try {
        $Config = Get-Content $ConfigPath | ConvertFrom-Json
        $Global:CacheTimeoutHours = $Config.CacheTimeoutHours
    } catch {
        $Global:CacheTimeoutHours = 3
    }
} else {
    $Global:CacheTimeoutHours = 3
}

# === Main Form ===
$form = New-Object System.Windows.Forms.Form
$form.Text = "AD Group Audit Dashboard"
$form.Size = New-Object System.Drawing.Size(950, 600)
$form.StartPosition = "CenterScreen"

# === Dry Run Checkbox ===
$dryRunCheckbox = New-Object System.Windows.Forms.CheckBox
$dryRunCheckbox.Text = "Dry Run Mode"
$dryRunCheckbox.Location = New-Object System.Drawing.Point(20, 20)
$dryRunCheckbox.Checked = $true
$form.Controls.Add($dryRunCheckbox)

# === RichTextBox for Status Console ===
$statusBox = New-Object System.Windows.Forms.RichTextBox
$statusBox.Size = New-Object System.Drawing.Size(900, 100)
$statusBox.Location = New-Object System.Drawing.Point(20, 450)
$statusBox.ReadOnly = $true
$form.Controls.Add($statusBox)

function LogStatus {
    param (
        [string]$Message,
        [string]$Type = "Info"  # Info, OK, Error, Warning
    )
    $color = switch ($Type) {
        "OK"      { "Green" }
        "Error"   { "Red" }
        "Warning" { "Orange" }
        default   { "Black" }
    }

    $statusBox.SelectionStart = $statusBox.TextLength
    $statusBox.SelectionColor = [System.Drawing.Color]::$color
    $statusBox.AppendText("$Message`r`n")
    $statusBox.SelectionColor = $statusBox.ForeColor
}

# === CSV Preview Grid ===
$grid = New-Object System.Windows.Forms.DataGridView
$grid.Size = New-Object System.Drawing.Size(600, 400)
$grid.Location = New-Object System.Drawing.Point(320, 20)
$grid.AutoSizeColumnsMode = "Fill"
$form.Controls.Add($grid)

function LoadCsvIntoGrid($path) {
    if (Test-Path $path) {
        $csv = Import-Csv $path
        $grid.DataSource = $csv
    } else {
        LogStatus "[Warning] CSV not found: $path" "Warning"
    }
}

# === Cache Age Label ===
$cacheAgeLabel = New-Object System.Windows.Forms.Label
$cacheAgeLabel.Text = "Cache Age: Unknown"
$cacheAgeLabel.Location = New-Object System.Drawing.Point(320, 430)
$cacheAgeLabel.Size = New-Object System.Drawing.Size(300, 20)
$form.Controls.Add($cacheAgeLabel)

# === Cache Expired Warning Label ===
$cacheExpiredLabel = New-Object System.Windows.Forms.Label
$cacheExpiredLabel.Text = ""
$cacheExpiredLabel.ForeColor = [System.Drawing.Color]::OrangeRed
$cacheExpiredLabel.Location = New-Object System.Drawing.Point(320, 455)
$cacheExpiredLabel.Size = New-Object System.Drawing.Size(300, 20)
$form.Controls.Add($cacheExpiredLabel)

function UpdateCacheAgeLabel {
    if ($Global:CacheTimestamp) {
        $ageMinutes = [math]::Round(((Get-Date) - $Global:CacheTimestamp).TotalMinutes / 5) * 5
        $cacheAgeLabel.Text = "Cache Age: $ageMinutes minutes"

        if (((Get-Date) - $Global:CacheTimestamp).TotalHours -ge $Global:CacheTimeoutHours) {
            $cacheExpiredLabel.Text = "⚠️ Cache is older than timeout ($Global:CacheTimeoutHours hrs)"
        } else {
            $cacheExpiredLabel.Text = ""
        }
    } else {
        $cacheAgeLabel.Text = "Cache Age: Unknown"
        $cacheExpiredLabel.Text = ""
    }
}

# === Editable Timeout Field ===
$timeoutLabel = New-Object System.Windows.Forms.Label
$timeoutLabel.Text = "Cache Timeout (hrs):"
$timeoutLabel.Location = New-Object System.Drawing.Point(650, 430)
$timeoutLabel.Size = New-Object System.Drawing.Size(130, 20)
$form.Controls.Add($timeoutLabel)

$timeoutBox = New-Object System.Windows.Forms.TextBox
$timeoutBox.Text = "$Global:CacheTimeoutHours"
$timeoutBox.Location = New-Object System.Drawing.Point(780, 428)
$timeoutBox.Size = New-Object System.Drawing.Size(40, 20)
$form.Controls.Add($timeoutBox)

$timeoutBox.Add_TextChanged({
    $newVal = $timeoutBox.Text
    if ($newVal -match '^\d+(\.\d+)?$') {
        $Global:CacheTimeoutHours = [double]$newVal
        $config = @{ CacheTimeoutHours = $Global:CacheTimeoutHours }
        $config | ConvertTo-Json | Set-Content "$PSScriptRoot\config.json"
        LogStatus "[OK] Cache timeout updated to $newVal hours." "OK"
        UpdateCacheAgeLabel
    } else {
        LogStatus "[Warning] Invalid timeout value: $newVal" "Warning"
    }
})

# === Button Factory ===
function CreateButton($text, $x, $y, $scriptPath, $csvPath, $isRemediation = $false) {
    $btn = New-Object System.Windows.Forms.Button
    $btn.Text = $text
    $btn.Size = New-Object System.Drawing.Size(280, 40)
    $btn.Location = New-Object System.Drawing.Point($x, $y)
    $btn.Add_Click({
        LogStatus "[Running] $text started..."
        $dryRunFlag = $dryRunCheckbox.Checked
        $job = Start-Job -ScriptBlock {
            & "$using:scriptPath" -DryRun:$using:dryRunFlag -FromGUI
        }

        if (-not $job) {
            LogStatus "[Error] Failed to start background job for $text." "Error"
            return
        }

        $timer = New-Object System.Windows.Forms.Timer
        $timer.Interval = 1000
        $timer.Add_Tick({
            if ($job -and $job.State -ne 'Running') {
                $timer.Stop()
                Receive-Job $job | Out-Null
                Remove-Job $job
                LogStatus "[OK] $text complete." "OK"
            
                if ($isRemediation -and $dryRunFlag) {
                    $latestDryRun = Get-ChildItem ".\Logs\AD_DryRun_*.csv" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                    if ($latestDryRun) {
                        LoadCsvIntoGrid $latestDryRun.FullName
                        LogStatus "[OK] Dry run preview loaded: $($latestDryRun.Name)" "OK"
                    }
                } elseif ($csvPath) {
                    LoadCsvIntoGrid $csvPath
                }
                UpdateCacheAgeLabel
            }
        })
        $timer.Start()
    })
    $form.Controls.Add($btn)
}

# === Load Cache and Check Freshness ===
. "$PSScriptRoot\Scripts\Cache.ps1"

if (-not $Global:CacheTimestamp -or ((Get-Date) - $Global:CacheTimestamp).TotalHours -gt $Global:CacheTimeoutHours) {
    $labelCacheAge.Text = "Cache Age: Unknown or Expired"
    LogStatus "[Warning] No valid AD cache found. Please refresh before running reports." "Warning"

    # Disable all action buttons
    $form.Controls | Where-Object { $_ -is [System.Windows.Forms.Button] } | ForEach-Object {
        $_.Enabled = $false
    }

    # Enable only the Refresh Cache button (we’ll tag it next)
    $refreshButton.Enabled = $true
}

# === Buttons ===
$refreshButton = CreateButton "Refresh AD Cache" 20 10 ".\Scripts\Cache.ps1" $null
CreateButton "Run Audit" 20 60 ".\Scripts\Audit.ps1" "Reports\AD_GroupAudit_Report.csv"
CreateButton "Run Extra Groups Report" 20 110 ".\Scripts\ExtraGroups.ps1" "Reports\AD_ExtraGroups_Report.csv"
CreateButton "Run Remediation" 20 160 ".\Scripts\Remediate.ps1" "Reports\AD_GroupAudit_Report.csv" $true
CreateButton "Compare Reports" 20 210 ".\Scripts\CompareReports.ps1" "Reports\AD_GroupAudit_Changes.csv"

# === Error Log Viewer ===
$logButton = New-Object System.Windows.Forms.Button
$logButton.Text = "View Latest Error Log"
$logButton.Size = New-Object System.Drawing.Size(280, 40)
$logButton.Location = New-Object System.Drawing.Point(20, 260)
$logButton.Add_Click({
    $latestLog = Get-ChildItem ".\Logs\AD_ErrorLog_*.csv" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
    if ($latestLog) {
        LoadCsvIntoGrid $latestLog.FullName
        LogStatus "[Log] Loaded error log: $($latestLog.Name)" "OK"
    } else {
        LogStatus "[Warning] No error logs found." "Warning"
    }
})
$form.Controls.Add($logButton)

# === Refresh AD Cache Button ===
$refreshButton = New-Object System.Windows.Forms.Button
$refreshButton.Text = "Refresh AD Data"
$refreshButton.Size = New-Object System.Drawing.Size(280, 40)
$refreshButton.Location = New-Object System.Drawing.Point(20, 310)
$refreshButton.Add_Click({
$statusLabel.Text = "Refreshing AD cache..."
$statusLabel.ForeColor = [System.Drawing.Color]::Orange

LogStatus "[Running] Refreshing AD cache..."
. "$PSScriptRoot\Scripts\Cache.ps1"
UpdateCacheAgeLabel
LogStatus "[OK] AD cache refreshed." "OK"

$statusLabel.Text = "AD cache is up to date."
$statusLabel.ForeColor = [System.Drawing.Color]::Green

    # Re-enable all buttons after successful refresh
    $form.Controls | Where-Object { $_ -is [System.Windows.Forms.Button] } | ForEach-Object {
        $_.Enabled = $true
    }
})

# === Timer to Auto-Update Cache Age Label Every 10 Minutes ===
$ageTimer = New-Object System.Windows.Forms.Timer
$ageTimer.Interval = 600000
$ageTimer.Add_Tick({ UpdateCacheAgeLabel })
$ageTimer.Start()

$statusLabel = New-Object System.Windows.Forms.Label
$statusLabel.Text = ""
$statusLabel.Size = New-Object System.Drawing.Size(280, 20)
$statusLabel.Location = New-Object System.Drawing.Point(20, 340)
$form.Controls.Add($statusLabel)

# === Initial Cache Age Update ===
UpdateCacheAgeLabel

# === Initial Cache Load and First-Launch Check ===
. "$PSScriptRoot\Scripts\Cache.ps1"

if (-not $Global:CacheTimestamp -or ((Get-Date) - $Global:CacheTimestamp).TotalHours -gt $Global:CacheTimeoutHours) {
$statusLabel.Text = "Initializing AD cache..."
$statusLabel.ForeColor = [System.Drawing.Color]::Orange

LogStatus "[Info] No valid AD cache found. Refreshing now..." "Info"
. "$PSScriptRoot\Scripts\Cache.ps1"
UpdateCacheAgeLabel
LogStatus "[OK] AD cache refreshed on first launch." "OK"

$statusLabel.Text = "AD cache is up to date."
$statusLabel.ForeColor = [System.Drawing.Color]::Green
}

# === Launch GUI ===
[void]$form.ShowDialog()
